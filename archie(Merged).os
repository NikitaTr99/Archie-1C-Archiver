
Перем параметрПутьКБД;
Перем параметрПутьКСохранениюАрхива;

Перем конфигКолличествоКопий;

Перем файлКонфигурации;

//Переменные, необходимые для проверки баз по критериям
Перем путь;

Перем часКритерий, текущееВремя, разницаВремени, часИзменения;
Перем датаИзменения;

Перем найденныеФайлы;
Перем файл;
Перем текущаяДата;

Перем текущийДень, текущийМесяц, текущийГод;
Перем послИзмДень, послИзмМесяц, послИзмГод;


Процедура ПриНачалеРаботыСистемы()
	ИнициализироватьПеременные();
	ПроинициализироватьПеременныеДляАрхивации();
	ПроверитьБазыКАрхивации();
	//Архивировать(параметрПутьКБД);
	Очистка();
КонецПроцедуры

Процедура ИнициализироватьПеременные()

	файлКонфигурации = Новый Файл("arch.cfg");

	параметрПутьКБД = Новый Файл(АргументыКоманднойСтроки[0]);
	параметрПутьКСохранениюАрхива = Новый Файл(АргументыКоманднойСтроки[1]);
	
	конфигКолличествоКопий = ПолучитьЗначениеКонфигурацииПоКлючу("конфигКолличествоКопий");

КонецПроцедуры

Процедура ПроинициализироватьПеременныеДляАрхивации()
	
	//Ожидается получение пути через ГПИ / Консоль
    //путь = "E:/1C/Base1"; 
    путь = параметрПутьКБД;
	найденныеФайлы = НайтиФайлы(путь, Истина);


    текущаяДата = ТекущаяДата();
	текущееВремя = ТекущаяДата();

    текущийДень = День(текущееВремя);
    текущийМесяц = Месяц(текущееВремя);
    текущийГод = Год(текущееВремя);
    
    текущееВремя = Час(текущееВремя);
	часКритерий = 12;
    
    файл = Новый Файл(путь);
    датаИзменения = файл.ПолучитьВремяИзменения();

    послИзмДень = День(датаИзменения);
    послИзмМесяц = Месяц(датаИзменения);
    послИзмГод = Год(датаИзменения);

    текущийДень = текущийДень - послИзмДень;
    текущийМесяц = текущийМесяц - послИзмМесяц;
    текущийГод = текущийГод - послИзмГод;
    
    часИзменения = Час(датаИзменения);

    //DEBUG BLCK - Удалить при ненадобности
    Сообщить("[Log]: Текущая дата:");
    Сообщить(текущаяДата);
    
    Сообщить("[Log]: Дней прошло:");
    Сообщить(текущийДень);
    Сообщить("[Log]: Мес. прошло:");
    Сообщить(текущийМесяц);
    Сообщить("[Log]: Лет прошло:");
    Сообщить(текущийГод);


    Сообщить("[Log]: Текущее время (Ч):");
    Сообщить(текущееВремя);
    Сообщить("[Log]: Дата изменения папки:");
    Сообщить(датаИзменения);
    Сообщить("[Log]: Час изменения папки:");
    Сообщить(часИзменения);
КонецПроцедуры

Процедура ПроверитьБазыКАрхивации()

    //Прошло больше одного дня - с момента последнего изменения
    Если текущийДень ИЛИ текущийМесяц ИЛИ текущийГод > 1 Тогда
        разницаВремени = 24 + текущееВремя - часИзменения;
        
        Сообщить("[Log]: Разница времени (+24ч)");
        Сообщить(разницаВремени);
        Если разницаВремени > часКритерий Тогда
            Сообщить("Архивация");
			Архивировать(параметрПутьКБД);  
        Иначе
            Сообщить("Нет архивации");
        КонецЕсли;
    Иначе
        разницаВремени  = текущееВремя - часИзменения;
        Сообщить("[Log]: Разница времени (+0ч)");
        Сообщить(разницаВремени);
        Если разницаВремени < часКритерий Тогда
            Сообщить("Архивация");
			Архивировать(параметрПутьКБД);
        Иначе
            Сообщить("Нет архивации");
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

//Принимает перменную типа Файл 
Процедура Архивировать(архивируемыйКаталог) 

	ДатаАрхивации = Формат(МестноеВремя(ТекущаяУниверсальнаяДата()), "ДФ=дд.ММ.гггг-ЧЧммсс");

	имяКаталогаИФайла = архивируемыйКаталог.Имя;

	контекстныйКаталогАрхивов = Новый Файл(параметрПутьКСохранениюАрхива.ПолноеИмя + "\" + имяКаталогаИФайла);

	Если НЕ контекстныйКаталогАрхивов.Существует() Тогда
		СоздатьКаталог(контекстныйКаталогАрхивов.ПолноеИмя);	
	КонецЕсли;

	архив = Новый ЗаписьZipФайла(контекстныйКаталогАрхивов.ПолноеИмя + "\" + имяКаталогаИФайла + "_" + ДатаАрхивации + ".zip");

	архив.Добавить(архивируемыйКаталог.ПолноеИмя, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);

	архив.Записать();

КонецПроцедуры

Процедура Очистка()
	Если параметрПутьКСохранениюАрхива.Существует() Тогда
		
		МассивКаталогов = НайтиФайлы(параметрПутьКСохранениюАрхива.ПолноеИмя, "*");

		Для Каждого Каталог Из МассивКаталогов Цикл
			МассивАрхивов = НайтиФайлы(Каталог.ПолноеИмя, "*.zip");
			Если МассивАрхивов.Количество() > Число(конфигКолличествоКопий) Тогда
				количествоКУдалению = МассивАрхивов.Количество() - Число(конфигКолличествоКопий) - 1;
				Для Сч = 0 По количествоКУдалению Цикл
					архивКУдалению = МассивАрхивов.Получить(Сч);
					УдалитьФайлы(архивКУдалению.ПолноеИмя);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗначениеКонфигурацииПоКлючу(ключ) 

	Если файлКонфигурации.Существует() Тогда
	
		прочитанныйТекст = Новый ЧтениеТекста(файлКонфигурации.ПолноеИмя, КодировкаТекста.UTF8);

		строкаТекстовогоФайла = "";
		значение = Неопределено;
		
		Пока строкаТекстовогоФайла <> Неопределено Цикл
			строкаТекстовогоФайла = ПрочитанныйТекст.ПрочитатьСтроку();
			
			Если Найти(строкаТекстовогоФайла, ключ) > 0 Тогда
				разложеннаяСтрока = РазложитьСтрокуНаПодстроки(строкаТекстовогоФайла, "=");
				значение = разложеннаяСтрока[1];
			КонецЕсли;

		КонецЦикла;

			прочитанныйТекст.Закрыть();
	КонецЕсли;

	Возврат значение;
	
КонецФункции
Функция РазложитьСтрокуНаПодстроки(ВходящаяСтрока, Разделитель)
						   
	МассивСтрок = Новый Массив();
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Разделитель, Символы.ПС);
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ВходящаяСтрока) Цикл
		Подстрока = СтрПолучитьСтроку(ВходящаяСтрока, ИндексСтроки);
		МассивСтрок.Добавить(Подстрока);
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции 


ПриНачалеРаботыСистемы();