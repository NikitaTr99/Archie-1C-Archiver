#Использовать "C:\OLibs\yadisk"

//Общие переменные
Перем параметрПутьКБД;
Перем конфигКолличествоКопий;
Перем файлКонфигурации;
Перем уровеньСжатия;
Перем часКритерий;

//Локальный режим
Перем параметрПутьКСохранениюАрхива;

//Облачный режим
Перем ЭтоАрхивацияВОблако;
Перем ID_Приложения;
Перем OAuth_Токен;
Перем ЯндексДиск;



Процедура ПриНачалеРаботыСистемы()
	Инициализация();
	ПроверитьБазыКАрхивации(параметрПутьКБД);
	// Очистка();
КонецПроцедуры

Процедура Инициализация()

	OAuth_Токен = Неопределено;

	файлКонфигурации = новый Файл("arch.cfg");

	Аргумент = АргументыКоманднойСтроки[0];
	Если Найти(Аргумент, "local") Тогда
		ЭтоАрхивацияВОблако = Ложь;
		ИнициализироватьЛокальныйРежим();
	ИначеЕсли Найти(Аргумент, "cloud") Тогда
		ЭтоАрхивацияВОблако = Истина;
		ИнициализироватьОблачныйРежим();
	ИначеЕсли Найти(Аргумент, "-h") Тогда
		Сообщить("archie.exe [режим]" + Символы.ПС +
		"	local - Локальный режим архивации." + Символы.ПС +
		"	cloud - Архивация в облако Яндекс.Диск");
		ЗавершитьРаботу(0);
	Иначе
		Сообщить("Неизвестный аргумент - " + Аргумент);
		ЗавершитьРаботу(0);
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьЛокальныйРежим()
	Счётчик = 1;
	Пока Счётчик < АргументыКоманднойСтроки.Количество() Цикл
		Аргумент = АргументыКоманднойСтроки[Счётчик];
		Если Найти(Аргумент, "-i") Тогда
			Счётчик = Счётчик + 1;
			параметрПутьКБД = Новый Файл(АргументыКоманднойСтроки[Счётчик]);
		ИначеЕсли Найти(Аргумент, "-o") Тогда
			Счётчик = Счётчик + 1;
			параметрПутьКСохранениюАрхива = Новый Файл(АргументыКоманднойСтроки[Счётчик]);
		ИначеЕсли Найти(Аргумент, "-c") Тогда
			Счётчик = Счётчик + 1;
			конфигКолличествоКопий = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-hr") Тогда
			Счётчик = Счётчик + 1;
			часКритерий = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-z") Тогда
			Счётчик = Счётчик + 1;
			уровеньСжатияСтрока = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-h") Тогда
			Счётчик = Счётчик + 1;
			Сообщить("archie.exe local -i <значение> -o <значение> -c <значение> -hr <значение> -z [максимальный|минимальный|оптимальный]" + Символы.ПС +
			"	-i - Путь к папке с БД 1с." + Символы.ПС +
			"	-o - Путь к папке с архивами БД (Если такой нет, то будет создана)" + Символы.ПС +
			"	-c - Количество копий БД." + Символы.ПС +
			"	-hr - Количество часов с момента прошлого изменения БД для архивации." + Символы.ПС +
			"	-z - Уровень архивации (значения: [максимальный|минимальный|оптимальный])" + Символы.ПС + 
			"	-h - Справка.");
			ЗавершитьРаботу(0);
		КонецЕсли;
		Счётчик = Счётчик + 1;
	КонецЦикла;

	Если уровеньСжатияСтрока <> Неопределено И Нрег(уровеньСжатияСтрока) = "максимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Максимальный;
	ИначеЕсли Нрег(уровеньСжатияСтрока) = "минимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Минимальный;
	ИначеЕсли Нрег(уровеньСжатияСтрока) = "оптимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Оптимальный;
	Иначе
		Сообщить("Неизвестный уровень сжатия. Выбран параметр по умолчанию - оптимальный");
		уровеньСжатия = УровеньСжатияZIP.Оптимальный;
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьОблачныйРежим()

	Если НЕ файлКонфигурации.Существует() Тогда
		Сообщить("Ошибка. Файл конфигурации arch.cfg не найден.");
		ЗавершитьРаботу(0);
	КонецЕсли;

	ID_Приложения = ПолучитьЗначениеКонфигурацииПоКлючу("ID_Приложения");
	OAuth_Токен = ПолучитьЗначениеКонфигурацииПоКлючу("OAuth_Токен");

	Если ID_Приложения <> Неопределено И OAuth_Токен = Неопределено Тогда
		ЗапуститьПриложение("https://oauth.yandex.ru/authorize?response_type=token&client_id=" + ID_Приложения);
		ЗавершитьРаботу(0);
	КонецЕсли;

	ЯндексДиск = новый ЯндексДиск;
	ЯндексДиск.УстановитьТокенАвторизации(OAuth_Токен);


	Счётчик = 1;
	Пока Счётчик < АргументыКоманднойСтроки.Количество() Цикл
		Аргумент = АргументыКоманднойСтроки[Счётчик];
		Если Найти(Аргумент, "-i") Тогда
			Счётчик = Счётчик + 1;
			параметрПутьКБД = Новый Файл(АргументыКоманднойСтроки[Счётчик]);
		ИначеЕсли Найти(Аргумент, "-o") Тогда
			Счётчик = Счётчик + 1;
			параметрПутьКСохранениюАрхива = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-c") Тогда
			Счётчик = Счётчик + 1;
			конфигКолличествоКопий = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-hr") Тогда
			Счётчик = Счётчик + 1;
			часКритерий = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-z") Тогда
			Счётчик = Счётчик + 1;
			уровеньСжатияСтрока = АргументыКоманднойСтроки[Счётчик];
		ИначеЕсли Найти(Аргумент, "-h") Тогда
			Счётчик = Счётчик + 1;
			Сообщить("archie.exe cloud -i <значение> -o <значение> -c <значение> -hr <значение> -z [максимальный|минимальный|оптимальный]" + Символы.ПС +
			"	-i - Путь к папке с БД 1с." + Символы.ПС +
			"	-o - Путь к папке с архивами БД на удалённом облаке (\path\to\backups)" + Символы.ПС +
			"	-c - Количество копий БД." + Символы.ПС +
			"	-hr - Количество часов с момента прошлого изменения БД для архивации." + Символы.ПС +
			"	-z - Уровень архивации (значения: [максимальный|минимальный|оптимальный])" + Символы.ПС + 
			"	-h - Справка.");
			ЗавершитьРаботу(0);
		КонецЕсли;
		Счётчик = Счётчик + 1;
	КонецЦикла;

	Если уровеньСжатияСтрока <> Неопределено И Нрег(уровеньСжатияСтрока) = "максимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Максимальный;
	ИначеЕсли Нрег(уровеньСжатияСтрока) = "минимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Минимальный;
	ИначеЕсли Нрег(уровеньСжатияСтрока) = "оптимальный" Тогда
		уровеньСжатия = УровеньСжатияZIP.Оптимальный;
	Иначе
		Сообщить("Неизвестный уровень сжатия. Выбран параметр по умолчанию - оптимальный");
		уровеньСжатия = УровеньСжатияZIP.Оптимальный;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьБазыКАрхивации(входящийКаталог)
	маркерБд = НайтиФайлы(входящийКаталог.ПолноеИмя, "*.1cd");
	Если НЕ ЗначениеЗаполнено(маркерБд) Тогда
		папкиВходящегоКаталога = НайтиФайлы(входящийКаталог.ПолноеИмя, "*");
		Для каждого каталог Из папкиВходящегоКаталога Цикл
			Если каталог.ЭтоКаталог() Тогда
				ПроверитьБазыКАрхивации(каталог);
			КонецЕсли;
		КонецЦикла;
		Иначе
			ПроверитьУсловиеИАрхивировать(входящийКаталог);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьУсловиеИАрхивировать(каталогБд)
    мВремяИзменения = каталогБд.ПолучитьВремяИзменения();
	мСекундыТаймаута = 60 * 60 * Число(часКритерий);
	мИзменениеСТаймаутом = мВремяИзменения + мСекундыТаймаута;
	Если ТекущаяДата() > мИзменениеСТаймаутом Тогда
		Если ЭтоАрхивацияВОблако Тогда
	Сообщить("ДА");

			АрхивироватьВОблако(каталогБд);
		Иначе
			АрхивироватьЛокально(каталогБд);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

//Принимает перменную типа Файл 
Процедура АрхивироватьЛокально(архивируемыйКаталог) 
	ДатаАрхивации = Формат(МестноеВремя(ТекущаяУниверсальнаяДата()), "ДФ=гггг.ММ.дд_ЧЧ-мм-сс");
	имяКаталогаИФайла = архивируемыйКаталог.Имя;
	контекстныйКаталогАрхивов = Новый Файл(параметрПутьКСохранениюАрхива.ПолноеИмя + "\" + имяКаталогаИФайла);
	Если НЕ контекстныйКаталогАрхивов.Существует() Тогда
		СоздатьКаталог(контекстныйКаталогАрхивов.ПолноеИмя);	
	КонецЕсли;
	архив = Новый ЗаписьZipФайла(контекстныйКаталогАрхивов.ПолноеИмя + "\" + имяКаталогаИФайла + "_" + ДатаАрхивации + ".zip", уровеньСжатия);
	архив.Добавить(архивируемыйКаталог.ПолноеИмя, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	архив.Записать();

	ОчисткаЛокально();

КонецПроцедуры

//РАБОТАЕШЬ ТУТ
Процедура АрхивироватьВОблако(архивируемыйКаталог) 
	ДатаАрхивации = Формат(МестноеВремя(ТекущаяУниверсальнаяДата()), "ДФ=гггг.ММ.дд_ЧЧ-мм-сс");
	имяКаталогаИФайла = архивируемыйКаталог.Имя;
	// контекстныйКаталогАрхивов = Новый Файл(параметрПутьКСохранениюАрхива.ПолноеИмя + "\" + имяКаталогаИФайла);
	// Если НЕ контекстныйКаталогАрхивов.Существует() Тогда
		//Тут нужно создать каталог в облаке	
	// КонецЕсли;
	ЯндексДиск.СоздатьПапку("/Music");
	//Нужно добиться точно такой же структуры файлов что и в локальном режиме.
	//
	//РЕАЛИЗОВЫВАЙ ТУТ
КонецПроцедуры

Процедура ОчисткаЛокально()
	Если параметрПутьКСохранениюАрхива.Существует() Тогда
		МассивКаталогов = НайтиФайлы(параметрПутьКСохранениюАрхива.ПолноеИмя, "*");
		Для Каждого Каталог Из МассивКаталогов Цикл
			МассивАрхивов = НайтиФайлы(Каталог.ПолноеИмя, "*.zip");
			Если МассивАрхивов.Количество() > Число(конфигКолличествоКопий) Тогда
				количествоКУдалению = МассивАрхивов.Количество() - Число(конфигКолличествоКопий) - 1;
				Для Сч = 0 По количествоКУдалению Цикл
					архивКУдалению = МассивАрхивов.Получить(Сч);
					УдалитьФайлы(архивКУдалению.ПолноеИмя);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОчисткаОблако()
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////
//Служебное
//////////////////////////////////////////////////////////////////
Функция УбратьКовычкиВПути(ПутьСтрока)
	Возврат СтрЗаменить(ПутьСтрока, """", "");
КонецФункции

Функция ПолучитьЗначениеКонфигурацииПоКлючу(ключ) 

	Если файлКонфигурации.Существует() Тогда
		прочитанныйТекст = Новый ЧтениеТекста(файлКонфигурации.ПолноеИмя, КодировкаТекста.UTF8);
		строкаТекстовогоФайла = "";
		значение = Неопределено;
		Пока строкаТекстовогоФайла <> Неопределено Цикл
			строкаТекстовогоФайла = ПрочитанныйТекст.ПрочитатьСтроку();
			Если СтрНачинаетсяС(строкаТекстовогоФайла, ключ) Тогда
				разложеннаяСтрока = РазложитьСтрокуНаПодстроки(строкаТекстовогоФайла, "=");
				значение = разложеннаяСтрока[1];
			КонецЕсли;
		КонецЦикла;
			прочитанныйТекст.Закрыть();
	КонецЕсли;

	Возврат значение;

КонецФункции

Функция РазложитьСтрокуНаПодстроки(ВходящаяСтрока, Разделитель)
						   
	МассивСтрок = Новый Массив();
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Разделитель, Символы.ПС);
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ВходящаяСтрока) Цикл
		Подстрока = СтрПолучитьСтроку(ВходящаяСтрока, ИндексСтроки);
		МассивСтрок.Добавить(Подстрока);
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции 

ПриНачалеРаботыСистемы();